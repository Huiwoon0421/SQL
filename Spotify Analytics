# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. What are the top 10 tracks based on popularity and who are the artist

SELECT track_name, artist_name
FROM Spotifydata
ORDER BY popularity desc
LIMIT 10;

#2. Which song has the highest combined score of danceability and energy, and who is the artist?

SELECT track_name, artist_name, (danceability+energy) AS Combined_score 
FROM Spotifydata
GROUP BY Combined_score
ORDER BY Combined_score desc
LIMIT 1;

#3. What is the average danceability by artist and track?

SELECT AVG(danceability)
FROM Spotifydata;

#4. what's the average danceability for the 10 most popular songs?

SELECT AVG(danceability) AS avg_danceability
FROM (
    SELECT danceability
    FROM Spotifydata
    ORDER BY popularity DESC
    LIMIT 10
) AS top_10_songs;

#5. What artist released the longest song?

SELECT artist_name
FROM Spotifydata
ORDER BY duration_ms desc
LIMIT 1;

#6. Which artists appear more than once in the tracklist, and how many songs do they each have?

SELECT artist_name, COUNT(track_name)
FROM Spotifydata
GROUP BY artist_name
HAVING COUNT(track_name) >=2

#7. Which song has the lowest popularity score, and who is the artist?

SELECT track_name,artist_name, popularity
FROM Spotifydata
ORDER BY popularity ASC
LIMIT 1;

#8. Classify the songs based on popularity scores, using thresholds such as: 'Hit' (popularity score > 80), 'Good' (60-80), and 'Average' (<60)?

SELECT track_name, popularity,
CASE WHEN popularity >= 80 THEN 'HITZ'
WHEN popularity BETWEEN 60 AND 79 THEN 'GOOD'
ELSE 'Average'
END AS Grading
FROM Spotifydata
ORDER BY popularity desc;
